#!/usr/bin/env python

import optparse
import string
import subprocess
import os.path,tempfile,shutil
from multiprocessing import Pool

def run(cmd,frame,name):
    command = cmd.substitute(frame=frame,name=name)
    retcode = subprocess.call(command, shell=True)
    

usage="""usage: %prog [options] cmd
produce an animation from indevidual frames generated by running the command cmd

cmd can be any command that can generate a png image. You can use the $frame place holder to specify the current frame number and $name for the output file name. If both place holders do not appear they are assumed to be the last two arguments. You will need to use quotes for cmd if the command includes options and arguments."""

parser = optparse.OptionParser(usage=usage)
parser.add_option("-o","--output",default="animation.avi",help="the name of the output file")
parser.add_option("-f","--frame",metavar="F0 F1",nargs=2,type="int",help="set the first and last frame number")
parser.add_option("-r","--frame-rate",default=12,type="int",help="set the frame rate, default=12fps")
opts,args = parser.parse_args()

if len(args)<1:
    parser.error("No command the run specified")
elif len(args)>1:
    parser.error("Expected only one argument - is the argument quoted")

command = args[0]
for p in ['$frame','$name']:
    if p not in command:
        command += ' %s'%p
command = string.Template(command)

if opts.frame == None:
    parser.error("no range of frames specified")

tmpdir=tempfile.mkdtemp()

outTemplate=os.path.join(tmpdir,'output.%05d.png')
pool = Pool()
for i in range(opts.frame[0],opts.frame[1]):
    f = '%d'%i
    o = outTemplate%i
    pool.apply_async(run,[command,f,o])
pool.close()
pool.join()

subprocess.call("ffmpeg -f image2 -i %s -r %d  %s"%(outTemplate,opts.frame_rate,opts.output),shell=True)

shutil.rmtree(tmpdir)
